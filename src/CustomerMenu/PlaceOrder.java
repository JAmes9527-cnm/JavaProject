/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CustomerMenu;
import Admin.Customer;
import Admin.ObjWriteRead;
import javax.swing.JOptionPane;
import java.io.*;
import java.io.IOException;  // Import the IOException class to handle errors
/**
 *
 * @author james
 */
public class PlaceOrder extends javax.swing.JFrame {

    /**
     * Creates new form PlaceOrder
     */
    public PlaceOrder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Dine-in");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Take away");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delivery");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButton4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(221, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton4)
                .addGap(48, 48, 48)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(27, 27, 27)
                .addComponent(jButton3)
                .addContainerGap(163, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
 String[] customOptions = { "Accept", "Reject" };

// Show a custom confirmation dialog
    double totalPrice = CartItem.getTotal();
int confirmation = JOptionPane.showOptionDialog(
    null,
    "The total price of the order is RM" + totalPrice,
    "Order Confirmation",
    JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null, // Use default icon
    customOptions, // Use custom button labels
    customOptions[0] // Default selection
);

if (confirmation == 0) {
    // User clicked "Accept" (customOptions[0])
    // Handle the order confirmation logic here
    String currentTime = Time.getOrderTime();
    String OrderPath = "Order"+currentTime+".txt";
    if(Customer.findCustomerCredit(CustomerLogin.customerID) >= totalPrice){
        JOptionPane.showMessageDialog(null, "Order Success");
        Transaction tran = new Transaction(Transaction.type.ORDER, Customer.findCustomerCredit(CustomerLogin.customerID), Customer.findCustomerCredit(CustomerLogin.customerID)-totalPrice);
        tran.addTransactionRecord(CustomerLogin.customerID);
        Customer.deductCustomerCredit(totalPrice);
        try {
      File myObj = new File(OrderPath);
      myObj.createNewFile();
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
        // Specify the old file name and the new file name
        ObjWriteRead.FileCopy(Customer.getCartPath(), OrderPath);
        
            
            OrderFile order=new OrderFile(CustomerLogin.customerID,OrderPath,OrderFile.Where.DINEIN);
            // Append the text to the file
            ObjWriteRead.appendObjectToFile(order, "Orders.dat");
            File CartFile = new File(Customer.getCartPath());
            CartFile.delete();
            customerMenu menu = new customerMenu();
            menu.setVisible(true);
            Cart cart = new Cart();
            cart.dispose();
            dispose();

        }
        else{
            JOptionPane.showMessageDialog(null, "Insufficient Balance!");
        } 
            
} else if (confirmation == 1) {
    // User clicked "Reject" (customOptions[1])
    // Handle the rejection logic here
} else {
    // User closed the dialog
    // Handle this case as needed
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
 String[] customOptions = { "Accept", "Reject" };

// Show a custom confirmation dialog
    double totalPrice = CartItem.getTotal();
int confirmation = JOptionPane.showOptionDialog(
    null,
    "The total price of the order is RM" + totalPrice,
    "Order Confirmation",
    JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null, // Use default icon
    customOptions, // Use custom button labels
    customOptions[0] // Default selection
);

if (confirmation == 0) {
    // User clicked "Accept" (customOptions[0])
    // Handle the order confirmation logic here
    String currentTime = Time.getOrderTime();
    String OrderPath = "Order"+currentTime+".txt";
    if(Customer.findCustomerCredit(CustomerLogin.customerID) >= totalPrice){
        JOptionPane.showMessageDialog(null, "Order Success");
        Transaction tran = new Transaction(Transaction.type.ORDER, Customer.findCustomerCredit(CustomerLogin.customerID), Customer.findCustomerCredit(CustomerLogin.customerID)-totalPrice);
        tran.addTransactionRecord(CustomerLogin.customerID);
        Customer.deductCustomerCredit(totalPrice);
        try {
      File myObj = new File(OrderPath);
      myObj.createNewFile();
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
        // Specify the old file name and the new file name
        ObjWriteRead.FileCopy(Customer.getCartPath(), OrderPath);
        
            
            OrderFile order=new OrderFile(CustomerLogin.customerID,OrderPath,OrderFile.Where.TAKEAWAY);

            // Append the text to the file
            ObjWriteRead.appendObjectToFile(order, "Orders.dat");
            File CartFile = new File(Customer.getCartPath());
            CartFile.delete();
            customerMenu menu = new customerMenu();
            menu.setVisible(true);
            Cart cart = new Cart();
            cart.dispose();
            dispose();

        }
        else{
            JOptionPane.showMessageDialog(null, "Insufficient Balance!");
        } 
            
} else if (confirmation == 1) {
    // User clicked "Reject" (customOptions[1])
    // Handle the rejection logic here
} else {
    // User closed the dialog
    // Handle this case as needed
}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Cart cart = new Cart();
        cart.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String[] customOptions = { "Accept", "Reject" };

// Show a custom confirmation dialog
    double totalPrice = CartItem.getTotal() + 5;
int confirmation = JOptionPane.showOptionDialog(
    null,
    "The total price of the order is RM" + totalPrice + " (RM5 delivery fee included)",
    "Order Confirmation",
    JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null, // Use default icon
    customOptions, // Use custom button labels
    customOptions[0] // Default selection
);

if (confirmation == 0) {
    // User clicked "Accept" (customOptions[0])
    // Handle the order confirmation logic here
    String currentTime = Time.getOrderTime();
    String OrderPath = "Order"+currentTime+".txt";
    if(Customer.findCustomerCredit(CustomerLogin.customerID) >= totalPrice){
        JOptionPane.showMessageDialog(null, "Order Success!\nSearching for delivery guy");
        Transaction tran = new Transaction(Transaction.type.ORDER, Customer.findCustomerCredit(CustomerLogin.customerID), Customer.findCustomerCredit(CustomerLogin.customerID)-totalPrice);
        tran.addTransactionRecord(CustomerLogin.customerID);
        Customer.deductCustomerCredit(totalPrice);
        try {
      File myObj = new File(OrderPath);
      myObj.createNewFile();
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
        // Specify the old file name and the new file name
        ObjWriteRead.FileCopy(Customer.getCartPath(), OrderPath);
        
            
            OrderFile order=new OrderFile(CustomerLogin.customerID,OrderPath,OrderFile.Where.DELIVERY);
            if(order.getDeliveryGuyAvailable().size() == 0){
                File f = new File(OrderPath);
                f.delete();
                JOptionPane.showMessageDialog(null, "There is no runner available right now!\nPlease consider dine in or take away");
                return;
            }

            // Append the text to the file
            ObjWriteRead.appendObjectToFile(order, "Orders.dat");
            File CartFile = new File(Customer.getCartPath());
            CartFile.delete();
            customerMenu menu = new customerMenu();
            menu.setVisible(true);
            Cart cart = new Cart();
            cart.dispose();
            dispose();

        }
        else{
            JOptionPane.showMessageDialog(null, "Insufficient Balance!");
        } 
            
} else if (confirmation == 1) {
    // User clicked "Reject" (customOptions[1])
    // Handle the rejection logic here
} else {
    // User closed the dialog
    // Handle this case as needed
}
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlaceOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    // End of variables declaration//GEN-END:variables
}
